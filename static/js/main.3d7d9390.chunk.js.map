{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","TextForm","text","setText","useState","modeStyle","getModeStyle","backgroundColor","color","Fragment","style","heading","onChange","event","target","value","rows","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","ntext","toLowerCase","handleClearOnClick","trim","split","filter","word","length","toFixed","Alert","alert","role","charAt","slice","msg","About","mystyle","setMyStyle","btntext","setBtnText","toggleStyle","border","App","setMode","setAlert","message","setTimeout","Router","aboutText","newMode","document","body","Switch","Route","path","exact","component","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.3d7d9390.chunk.js","sourcesContent":["import React from 'react';\r\n// import { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li> */}\r\n          </ul>\r\n          <div className=\"d-flex\">\r\n            <button className=\"btn btn-sm btn-dark mx-1\" onClick={() => props.toggleMode('dark')}>Dark Mode</button>\r\n            <button className=\"btn btn-sm btn-light mx-1\" onClick={() => props.toggleMode('light')}>Light Mode</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert('Converted to uppercase', 'success');\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let ntext = text.toLowerCase();\r\n    setText(ntext);\r\n    props.showAlert('Converted to lowercase', 'success');\r\n  };\r\n\r\n  const handleClearOnClick = () => {\r\n    let clearText = '';\r\n    setText(clearText);\r\n    props.showAlert('Text has been cleared', 'success');\r\n  };\r\n\r\n  const getModeStyle = () => {\r\n    switch (props.mode) {\r\n      case 'dark':\r\n        return { backgroundColor: '#333', color: 'white' };\r\n      case 'yellow':\r\n        return { backgroundColor: '#f9f871', color: '#333' };\r\n      case 'pink':\r\n        return { backgroundColor: '#ffc0cb', color: '#333' };\r\n      case 'green':\r\n        return { backgroundColor: '#a8e6cf', color: '#333' };\r\n      case 'blue':\r\n        return { backgroundColor: '#add8e6', color: '#333' };\r\n      default:\r\n        return { backgroundColor: 'white', color: 'black' };\r\n    }\r\n  };\r\n\r\n  const [text, setText] = useState('');\r\n  const modeStyle = getModeStyle();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={modeStyle}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"TextBox\"\r\n            onChange={handleOnChange}\r\n            style={modeStyle}\r\n            value={text}\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n              <button\r\n        className=\"btn mx-2\"\r\n        style={{ backgroundColor: props.mode === 'dark' ? '#6c757d' : props.mode === 'yellow' ? '#fdd835' : props.mode === 'pink' ? '#ff69b4' : props.mode === 'green' ? '#28a745' : props.mode === 'blue' ? '#007bff' : '#0d6efd', color: 'white' }}\r\n        onClick={handleUpClick}\r\n      >\r\n        Convert to Uppercase\r\n      </button>\r\n      <button\r\n        className=\"btn mx-2\"\r\n        style={{ backgroundColor: props.mode === 'dark' ? '#6c757d' : props.mode === 'yellow' ? '#fdd835' : props.mode === 'pink' ? '#ff69b4' : props.mode === 'green' ? '#28a745' : props.mode === 'blue' ? '#007bff' : '#0d6efd', color: 'white' }}\r\n        onClick={handleLoClick}\r\n      >\r\n        Convert to Lowercase\r\n      </button>\r\n      <button\r\n        className=\"btn mx-2\"\r\n        style={{ backgroundColor: props.mode === 'dark' ? '#6c757d' : props.mode === 'yellow' ? '#fdd835' : props.mode === 'pink' ? '#ff69b4' : props.mode === 'green' ? '#28a745' : props.mode === 'blue' ? '#007bff' : '#0d6efd', color: 'white' }}\r\n        onClick={handleClearOnClick}\r\n      >\r\n        Clear Text\r\n      </button>\r\n\r\n\r\n      </div>\r\n      <div className=\"container\" style={{ color: modeStyle.color }}>\r\n        <h1>Text Summary</h1>\r\n        <p>{text.trim().split(/\\s+/).filter((word) => word !== '').length} words and {text.length} characters</p>\r\n        <p>\r\n          {text.trim().length > 0\r\n            ? (0.008 * text.split(/\\s+/).length).toFixed(2)\r\n            : 0}{' '}\r\n          minutes to read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : 'Enter something into the textbox to preview'}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    if (!word) return '';\r\n    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n  };\r\n\r\n  return (\r\n    props.alert && (\r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}:</strong> {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import React, { useState } from 'react'\r\n              \r\nexport default function About() {\r\n  const [mystyle, setMyStyle] =useState({\r\n    color: 'black',\r\n    backgroundColor: 'white'\r\n  })\r\n\r\n  const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n  const toggleStyle =()=>{\r\n      if(mystyle.color ==='black'){\r\n        setMyStyle({color: 'white', \r\n          backgroundColor: 'black',\r\n          border: '1px solid white'\r\n        })\r\n        setBtnText(\"Enable Dark Mode\")\r\n      }else\r\n      {\r\n        setMyStyle({color: 'black', \r\n          backgroundColor: 'white'\r\n        })\r\n        setBtnText(\"Enable Light Mode\")\r\n      }\r\n\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\" style={mystyle}>\r\n        <h2>About US</h2>\r\n      <div className=\"accordion-item\" style={mystyle}>\r\n        <h2 className=\"accordion-header\">\r\n          <button className=\"accordion-button\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\r\n            Accordion Item #1\r\n          </button>\r\n        </h2>\r\n        <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\">\r\n          <div className=\"accordion-body\">\r\n            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\" style={mystyle}>\r\n        <h2 className=\"accordion-header\">\r\n          <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseTwo\">\r\n            Accordion Item #2\r\n          </button>\r\n        </h2>\r\n        <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse\">\r\n          <div className=\"accordion-body\">\r\n            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\" style={mystyle}>\r\n        <h2 className=\"accordion-header\">\r\n          <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseThree\">\r\n            Accordion Item #3\r\n          </button>\r\n        </h2>\r\n        <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse\">\r\n          <div className=\"accordion-body\">\r\n            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-3\"> \r\n      <button className=\"btn btn-primary\" onClick={toggleStyle} type=\"dark mode\"  > {btntext}</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Default mode\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({ msg: message, type: type });\n    setTimeout(() => {\n      setAlert(null); // Clear alert after 3 seconds\n    }, 2000);\n  };\n\n  const toggleMode = (newMode) => {\n    if (newMode === 'dark') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert('Dark mode has been enabled', 'success');\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enabled', 'success');\n      document.title = 'TextUtils - Light Mode';\n    }\n  };\n\n  return (\n    <>\n    <Router>\n    \n      <Navbar title=\"textUtils\" aboutText=\"about\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container\">\n      <Switch>\n          <Route path=\"/about\" exact component={About} />        \n          <Route path=\"/\" exact component={()=> <TextForm showAlert={showAlert} heading=\"Enter the text below to analyze\" mode={mode} />} />\n      </Switch>\n        \n     \n      </div>\n      \n      </Router>\n      </>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}